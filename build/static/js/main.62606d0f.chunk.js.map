{"version":3,"sources":["components/Card/Card.compo.jsx","components/Card-list/Cardlist.compo.jsx","components/search/Search.compo.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","aliens","id","name","email","Cardlist","map","alien","Search","type","placeholder","onChange","App","handleChange","e","setState","searchfield","target","value","state","fetch","then","response","json","alienData","error","console","log","this","filteredAliens","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mSAgBeA,EAbF,SAACC,GAAD,OACX,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAI,SACJC,IAAG,+BACDH,EAAMI,OAAOC,GAAK,IADjB,4BAIL,6BAAKL,EAAMI,OAAOE,OAClB,6BAAKN,EAAMI,OAAOG,Y,MCRP,SAASC,EAASR,GAC/B,OACE,qBAAKC,UAAU,WAAf,SACGD,EAAMI,OAAOK,KAAI,SAACC,GAAD,OAChB,cAAC,EAAD,CAAqBN,OAAQM,GAAlBA,EAAML,S,UCQVM,EAbA,SAACX,GACd,OACE,8BACE,uBACEC,UAAU,SACVW,KAAK,SACLC,YAAab,EAAMa,YACnBC,SAAUd,EAAMc,cCNHC,E,kDACnB,aAAe,IAAD,8BACZ,gBAqBFC,aAAe,SAACC,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SApBtC,EAAKC,MAAQ,CACXlB,OAAQ,GACRe,YAAa,IALH,E,qDAUd,WAAqB,IAAD,OAClB,IACEI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAe,EAAKT,SAAS,CAAEd,OAAQuB,OAE/C,MAAOC,GACPC,QAAQC,IAAI,iC,oBAShB,WAEE,MAAgCC,KAAKT,MAA7BlB,EAAR,EAAQA,OAAQe,EAAhB,EAAgBA,YACVa,EAAiB5B,EAAO6B,QAAO,SAACvB,GAAD,OACnCA,EAAMJ,KAAK4B,cAAcC,SAAShB,EAAYe,kBAGhD,OACE,gCACE,6CACA,cAAC,EAAD,CACErB,YAAa,oBACbC,SAAUiB,KAAKf,eASjB,cAACR,EAAD,CAAUJ,OAAQ4B,W,GAhDOI,aCQlBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.62606d0f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.css';\r\n\r\nconst Card = (props) => (\r\n  <div className=\"card-container\">\r\n    <img\r\n      alt=\"aliens\"\r\n      src={`https://robohash.org/${\r\n        props.aliens.id + 100\r\n      }?set=set1&size=180x180`}\r\n    />\r\n    <h3>{props.aliens.name}</h3>\r\n    <h5>{props.aliens.email}</h5>\r\n  </div>\r\n);\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from '../Card/Card.compo';\r\nimport './cardlist.css';\r\n\r\nexport default function Cardlist(props) {\r\n  return (\r\n    <div className=\"cardlist\">\r\n      {props.aliens.map((alien) => (\r\n        <Card key={alien.id} aliens={alien} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport './search.css';\r\n\r\nconst Search = (props) => {\r\n  return (\r\n    <div>\r\n      <input\r\n        className=\"search\"\r\n        type=\"search\"\r\n        placeholder={props.placeholder}\r\n        onChange={props.onChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React, { Component } from 'react';\r\nimport Cardlist from './components/Card-list/Cardlist.compo';\r\nimport Search from './components/search/Search.compo';\r\n\r\nexport default class App extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      aliens: [],\r\n      searchfield: '',\r\n    };\r\n  }\r\n\r\n  // mounting - when page loads...\r\n  componentDidMount() {\r\n    try {\r\n      fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then((response) => response.json())\r\n        .then((alienData) => this.setState({ aliens: alienData }));\r\n      // if(!response.ok) throw new Error('there was a problem fetching the data..')\r\n    } catch (error) {\r\n      console.log('there has been an error...');\r\n    }\r\n  }\r\n\r\n  // use Arrow functions when in class component- to simply use the THIS keyword\r\n  handleChange = (e) => {\r\n    this.setState({ searchfield: e.target.value });\r\n  };\r\n\r\n  render() {\r\n    // example for usong search feature\r\n    const { aliens, searchfield } = this.state;\r\n    const filteredAliens = aliens.filter((alien) =>\r\n      alien.name.toLowerCase().includes(searchfield.toLowerCase())\r\n    );\r\n\r\n    return (\r\n      <div>\r\n        <h2>A L I E N S</h2>\r\n        <Search\r\n          placeholder={'Search aliens....'}\r\n          onChange={this.handleChange}\r\n        />\r\n        {/* <input\r\n          type=\"search\"\r\n          placeholder=\"search the alien...\"\r\n          onChange={(e) => {\r\n            this.setState({ searchfield: e.target.value });\r\n          }}\r\n        /> */}\r\n        <Cardlist aliens={filteredAliens} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}